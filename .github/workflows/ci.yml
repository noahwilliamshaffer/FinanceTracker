name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.11'
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  # Linting and Code Quality
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt
    
    - name: Run Black (Code Formatting)
      run: black --check --diff src/ tests/
    
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff src/ tests/
    
    - name: Run Flake8 (Linting)
      run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run MyPy (Type Checking)
      run: mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: Run Bandit (Security Linting)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety (Dependency Security Check)
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Create test configuration
      run: |
        mkdir -p config
        cat > config/scoring.yaml << EOF
        scoring_weights:
          repo_spread_weight: 0.40
          bval_divergence_weight: 0.30
          volume_weight: 0.20
          volatility_weight: 0.10
          lookback_days: 30
          significant_spread_threshold: 5.0
          significant_divergence_threshold: 0.25
        EOF
    
    - name: Run pytest with coverage
      run: |
        pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=80 \
          --junitxml=pytest-report.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          htmlcov/
          coverage.xml

  # Terraform Validation
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '~1.0'
    
    - name: Terraform Format Check
      run: |
        cd infra/terraform
        terraform fmt -check -recursive
    
    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init -backend=false
    
    - name: Terraform Validate
      run: |
        cd infra/terraform
        terraform validate
    
    - name: Terraform Plan (Dry Run)
      run: |
        cd infra/terraform
        terraform plan -var-file="terraform.tfvars.example" -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      continue-on-error: true
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: terraform-plan
        path: infra/terraform/tfplan

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, terraform-validate]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install -r requirements.txt
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # Deploy to Development (on develop branch)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '~1.0'
    
    - name: Deploy Infrastructure
      run: |
        cd infra/terraform
        terraform init
        terraform workspace select dev || terraform workspace new dev
        terraform plan -var="environment=dev" -out=tfplan
        terraform apply -auto-approve tfplan
    
    - name: Deploy Lambda Functions
      run: |
        # Package Lambda functions
        mkdir -p lambda-packages
        cd src
        zip -r ../lambda-packages/treasury-fetcher.zip . -x "*.pyc" "__pycache__/*"
        zip -r ../lambda-packages/repo-fetcher.zip . -x "*.pyc" "__pycache__/*"
        zip -r ../lambda-packages/score-calculator.zip . -x "*.pyc" "__pycache__/*"
        
        # Update Lambda functions
        aws lambda update-function-code \
          --function-name finance-tracker-treasury-fetcher-dev \
          --zip-file fileb://../lambda-packages/treasury-fetcher.zip
        
        aws lambda update-function-code \
          --function-name finance-tracker-repo-fetcher-dev \
          --zip-file fileb://../lambda-packages/repo-fetcher.zip
        
        aws lambda update-function-code \
          --function-name finance-tracker-score-calculator-dev \
          --zip-file fileb://../lambda-packages/score-calculator.zip
    
    - name: Run Integration Tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Run basic health checks
        aws lambda invoke \
          --function-name finance-tracker-treasury-fetcher-dev \
          --payload '{"test": true}' \
          response.json
        
        cat response.json
    
    - name: Notify Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Development deployment successful"
        else
          echo "❌ Development deployment failed"
        fi

  # Deploy to Production (on main branch with tag)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '~1.0'
    
    - name: Deploy Production Infrastructure
      run: |
        cd infra/terraform
        terraform init
        terraform workspace select prod || terraform workspace new prod
        terraform plan -var="environment=prod" -out=tfplan
        terraform apply -auto-approve tfplan
    
    - name: Deploy Production Lambda Functions
      run: |
        # Package and deploy Lambda functions to production
        mkdir -p lambda-packages
        cd src
        zip -r ../lambda-packages/treasury-fetcher.zip . -x "*.pyc" "__pycache__/*"
        zip -r ../lambda-packages/repo-fetcher.zip . -x "*.pyc" "__pycache__/*"
        zip -r ../lambda-packages/score-calculator.zip . -x "*.pyc" "__pycache__/*"
        
        # Update production Lambda functions
        aws lambda update-function-code \
          --function-name finance-tracker-treasury-fetcher-prod \
          --zip-file fileb://../lambda-packages/treasury-fetcher.zip
        
        aws lambda update-function-code \
          --function-name finance-tracker-repo-fetcher-prod \
          --zip-file fileb://../lambda-packages/repo-fetcher.zip
        
        aws lambda update-function-code \
          --function-name finance-tracker-score-calculator-prod \
          --zip-file fileb://../lambda-packages/score-calculator.zip
    
    - name: Run Production Health Checks
      run: |
        # Wait for deployment
        sleep 60
        
        # Comprehensive health checks
        aws lambda invoke \
          --function-name finance-tracker-treasury-fetcher-prod \
          --payload '{"test": true}' \
          response.json
        
        # Check API Gateway endpoints if deployed
        # curl -f https://api.finance-tracker.com/health
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          - Automated production deployment
          - Infrastructure updates via Terraform
          - Lambda function deployments
          
          ## Deployment Details
          - Environment: Production
          - AWS Account: 783085491860
          - Region: us-east-1
        draft: false
        prerelease: false

  # Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // Keep artifacts for 7 days
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 7);
          
          for (const artifact of artifacts.artifacts) {
            const artifactDate = new Date(artifact.created_at);
            if (artifactDate < cutoffDate) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }
